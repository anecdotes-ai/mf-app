import { ServiceInstance } from './serviceInstance';
/**
 * Anecdotes API
 * Anecdotes API's
 *
 * OpenAPI spec version: 0.0.3
 * Contact: apiteam@anecdotes.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { EvidenceInstance } from './evidenceInstance';
import { ServiceField } from './serviceField';
import { ServiceStatusEnum, ServiceAuthTypeEnum, ServiceAvailabilityStatusEnum, ServiceTypeEnum } from './service-enums';

export interface Service {
  /**
   * The unique service identifier
   */
  service_id?: string;
  /**
   * The display name of this service
   */
  service_display_name?: string;
  /**
   * The service description
   */
  service_description?: string;
  service_fields?: Array<ServiceField>;
  service_families?: Array<string>;
  service_secrets?: any;
  service_parameters?: any;
  /**
   * The last time this service was updated by the customer/system
   */
  service_last_update?: Date;
  /**
   * Whether this service should be marked as \"is new\" or not
   */
  service_is_new?: boolean;
  service_status?: ServiceStatusEnum;
  /**
   * If the status of the service is False, service_last_error will be populated with the last error received from the service
   */
  service_last_error?: string;
  /**
   * The name of the evidence this service can collect automatically
   */
  service_evidence_list?: Array<EvidenceInstance>;
  /**
   * Whether this service should be displayed under the \"Recommended for you\" section
   */
  service_is_recommended?: boolean;
  service_auth_type?: ServiceAuthTypeEnum;
  service_auth_url?: string;
  service_availability_status?: ServiceAvailabilityStatusEnum;
  service_type?: ServiceTypeEnum;
  service_last_run?: Date;
  service_next_run?: Date;
  /**
   * The service intercom article
   */
  service_intercom_article?: string;

  /**
   * The service metadata for ticketing services use
   */
  service_metadata?: any;

  service_tip?: string;

  /*
   * Whether this service marks as favorite or not
   */
  service_is_favorite?: boolean;
  service_is_onprem?: boolean;
  service_tooltips?: StatusTip[];
  /*  a list of service instances for the service. In context of specific instance get the specified instance, otherwise get all existing instances. */
  service_instances_list?: ServiceInstance[];
  service_multi_account?: boolean;
}

export interface StatusTip {
  permanent: boolean;
  text: string;
  type: string;
}

export const maxNumberOfServiceAccountsAllowed = 10;

export const ServiceNotInstalledStatuses = [ServiceStatusEnum.FETCHED, ServiceStatusEnum.REMOVED, undefined, null];
export const ServiceFailedStatuses = [ServiceStatusEnum.INSTALLATIONFAILED, ServiceStatusEnum.CONNECTIVITYFAILED];
export const ServiceNeverInstalledStatuses = [ServiceStatusEnum.FETCHED, undefined, null];

